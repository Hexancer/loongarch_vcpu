   Compiling loongarch_vcpu v0.1.0 (/home/geng/loongarch_vcpu)
warning: unused imports: `Trap` and `ecfg::Ecfg`
 --> src/detect.rs:5:5
  |
5 |     ecfg::Ecfg,
  |     ^^^^^^^^^^
6 |     estat::{Exception, Estat, Trap},
  |                               ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning[E0133]: use of inline assembly is unsafe and requires unsafe block
  --> src/detect.rs:45:5
   |
45 | /     asm!(
46 | |         "move  {}, $tp",
47 | |         "move  $tp, {}",
48 | |         out(reg) stored_tp,
49 | |         in(reg) param,
50 | |         options(nomem, nostack)
51 | |     );
   | |_____^ use of inline assembly
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: inline assembly is entirely unchecked and can cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/detect.rs:37:1
   |
37 | unsafe fn init_detect_trap(param: usize) -> (bool, Eentry, usize) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: use of inline assembly is unsafe and requires unsafe block
  --> src/detect.rs:60:5
   |
60 | /     asm!(
61 | |         "move  {}, $tp",
62 | |         "move  $tp, {}",
63 | |         out(reg) ans,
64 | |         in(reg) tp,
65 | |         options(nomem, nostack)
66 | |     );
   | |_____^ use of inline assembly
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: inline assembly is entirely unchecked and can cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/detect.rs:58:1
   |
58 | unsafe fn restore_detect_trap(ie: bool, eentry: Eentry, tp: usize) -> usize {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: use of inline assembly is unsafe and requires unsafe block
   --> src/vcpu.rs:171:5
    |
171 | /     core::arch::asm!(
172 | |         // 保存 host 状态
173 | |         "csrwr {save3}, {LOONGARCH_CSR_SAVE3}",
...   |
187 | |         options(noreturn)
188 | |     );
    | |_____^ use of inline assembly
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: inline assembly is entirely unchecked and can cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/vcpu.rs:170:1
    |
170 | unsafe extern "C" fn _run_guest_loongarch(state: *mut VmCpuRegisters) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `rust_detect_trap` is never used
  --> src/detect.rs:26:15
   |
26 | extern "C" fn rust_detect_trap(trap_frame: &mut TrapFrame) {
   |               ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: struct `TrapFrame` is never constructed
  --> src/detect.rs:76:8
   |
76 | struct TrapFrame {
   |        ^^^^^^^^^

warning: methods `handle_timer_interrupt`, `handle_ipi`, and `flush_tlb` are never used
   --> src/vcpu.rs:192:8
    |
191 | impl<H: AxVCpuHal> LoongArchVCpu<H> {
    | ----------------------------------- methods in this implementation
192 |     fn handle_timer_interrupt(&mut self) -> AxResult<AxVCpuExitReason> {
    |        ^^^^^^^^^^^^^^^^^^^^^^
...
200 |     fn handle_ipi(&mut self) -> AxResult<AxVCpuExitReason> {
    |        ^^^^^^^^^^
...
205 |     fn flush_tlb(&mut self) {
    |        ^^^^^^^^^

error: immediate must be an integer in the range [0, 16383]
  --> src/percpu.rs:48:14
   |
48 |             "csrwr $r4, ecfg",
   |              ^^^^^^^^^^^^^^^
   |
note: instantiated into assembly here
  --> <inline asm>:2:12
   |
2  | csrwr $r4, ecfg
   |            ^

error: immediate must be an integer in the range [0, 16383]
  --> src/percpu.rs:55:14
   |
55 |             "csrwr $r4, estat",  // 清除异常状态
   |              ^^^^^^^^^^^^^^^^
   |
note: instantiated into assembly here
  --> <inline asm>:2:12
   |
2  | csrwr $r4, estat
   |            ^

error: immediate must be an integer in the range [0, 16383]
  --> src/percpu.rs:57:14
   |
57 |             "csrwr $r4, ticlr",  // 清除定时器中断
   |              ^^^^^^^^^^^^^^^^
   |
note: instantiated into assembly here
  --> <inline asm>:4:12
   |
4  | csrwr $r4, ticlr
   |            ^

error: immediate must be an integer in the range [0, 16383]
  --> src/percpu.rs:63:14
   |
63 |             "csrwr $r4, prmd"
   |              ^^^^^^^^^^^^^^^
   |
note: instantiated into assembly here
  --> <inline asm>:2:12
   |
2  | csrwr $r4, prmd
   |            ^

error: immediate must be an integer in the range [0, 16383]
  --> src/percpu.rs:69:14
   |
69 |             "csrwr $r4, ecfg"
   |              ^^^^^^^^^^^^^^^
   |
note: instantiated into assembly here
  --> <inline asm>:2:12
   |
2  | csrwr $r4, ecfg
   |            ^

For more information about this error, try `rustc --explain E0133`.
warning: `loongarch_vcpu` (lib) generated 7 warnings
error: could not compile `loongarch_vcpu` (lib) due to 5 previous errors; 7 warnings emitted
